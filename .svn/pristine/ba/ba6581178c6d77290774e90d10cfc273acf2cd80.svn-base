package com.web.business.generator.util.listener;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.annotation.WebListener;
import javax.servlet.http.HttpSession;
import javax.servlet.http.HttpSessionAttributeListener;
import javax.servlet.http.HttpSessionBindingEvent;

import com.web.business.generator.system.user.model.User;


/*
 *  处理用户重复登录的监听器
 *  @author: GouYudong
 *  创建时间:  2019年8月7日下午1:33:32
 */

@WebListener
public class LoginSessionListener implements HttpSessionAttributeListener{
	
	
	// 存放当前所有的会话session
	// 键：用户名；  值：当前会话session
	public	static	Map<String,HttpSession> map= new HashMap<String,HttpSession>();
	
	// 1.下线同一账号的老用户
	//新增时进入此方法
	public void attributeAdded(HttpSessionBindingEvent sessionBindingEvent) {
		
		/*
		 * String sessionName = sessionBindingEvent.getName(); HttpSession session =
		 * sessionBindingEvent.getSession(); String msg = null;
		 * 
		 * if(sessionName.equals("loginInfo")){
		 * 
		 * // 2.获取当前登录的对象 User loginUser=(User) session.getAttribute("loginInfo");
		 * String userName = loginUser.getName();
		 * 
		 * //3.判断是否是重复登录 if (map.containsKey(userName)) { // 4.同一账户二次登录,清除第一次的session
		 * HttpSession oldUserSession = map.get(userName);
		 * 
		 * //清除session map.remove(userName); oldUserSession.invalidate();
		 * 
		 * msg= "账号【"+
		 * loginUser.getName()+"】在【"+loginUser.getCurrentIp()+"】重新登录，您将被迫下线！";
		 * //将下线消息存入session session.setAttribute("msg", msg); System.out.println(msg);
		 * 
		 * //保存新的session map.put(userName, session);
		 * 
		 * }else { // 5.新用户登录，保存session //session.setAttribute("msg", "登录成功");
		 * map.put(loginUser.getName(),session);
		 * 
		 * }
		 * 
		 * }
		 */
	}

	//用户自己下线
	// session失效时的监听方法
	/*public void attributeRemoved(HttpSessionBindingEvent sessionBindingEvent) {
		
		HttpSession session = sessionBindingEvent.getSession();//获取当前会话
		User logOutUser = (User) session.getAttribute("loginInfo");
		String userName = logOutUser.getName();
		
		if (userName !=null && !(userName.equals(""))) {
			//老用户名不为空
			HttpSession logoutSession = map.get(userName);
			
			//移除缓存老用户的session
			map.remove(userName);
			
			//清除session
			logoutSession.invalidate();
			session.invalidate();
			System.out.println("账号"+logOutUser.getName()+"注销,最后登录IP为："+logOutUser.getCurrentIp());

		}
		
	}*/

	/*
	// session覆盖时的监听方法.
	public void attributeReplaced(HttpSessionBindingEvent arg0) {
		 
		String name=arg0.getName();
		
		if(name.equals("loginInfo")){
			LoginInfo oldLoginInfo=(LoginInfo)arg0.getValue();			
			map.remove(oldLoginInfo.getAccount());
			LoginInfo loginInfo=(LoginInfo)arg0.getSession().getAttribute("loginInfo");			
			if(map.get(loginInfo.getAccount())!=null)
			{
				HttpSession session=map.get(loginInfo.getAccount());
				session.removeAttribute("loginInfo");
				String msg= "账号【"+ loginInfo.getAccount()+"】在【"+loginInfo.getIp()+"】重新登录，您将被迫下线！";				
				session.setAttribute("msg",msg);
				session.setAttribute("flagDL", "2233");
			}
			map.put(loginInfo.getAccount(), arg0.getSession());
		}	
	}
	
	
*/

	
	
}

