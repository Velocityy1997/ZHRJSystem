package com.web.business.generator.comm.taskList.controller;
/*
 * 	与终端相关的任务
 *  @author: GouYudong
 *  创建时间:  2019年11月11日下午3:19:43
 */

import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.util.StopWatch.TaskInfo;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.web.business.generator.comm.route.model.Route;
import com.web.business.generator.comm.route.services.impl.RouteServiceImpl;
import com.web.business.generator.comm.taskList.model.TaskList;
import com.web.business.generator.comm.taskList.model.TerminalTaskInfo;
import com.web.business.generator.comm.taskList.services.impl.TaskListServiceImpl;
import com.web.business.generator.monitor.position.model.Position;
import com.web.business.generator.monitor.position.services.impl.PositionServiceImpl;
import com.web.business.generator.system.terminal.model.Terminal;
import com.web.business.generator.system.terminal.services.impl.TerminalServiceImpl;
import com.web.business.generator.system.user.model.User;
import com.web.business.generator.system.zhj.model.Zhj;
import com.web.business.generator.system.zhj.services.impl.ZhjServiceImpl;
import com.web.business.generator.util.log.SystemControllerLog;
import com.web.business.generator.util.task.TaskType;
import com.web.common.util.spring.RestResponse;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

@Api(description = "terminalTaskAPI", tags = "terminalTaskAPI")
@Controller
@RequestMapping("/terminalTask")
public class TerminalTaskController {
	
	@Resource
	private PositionServiceImpl positionServiceImpl;
	
	@Resource
	private TerminalServiceImpl terminalServiceImpl;
	
	@Resource
	private TaskListServiceImpl taskServiceImpl;
	
	@Resource
	private ZhjServiceImpl zhjServiceImpl;
	
	@Resource
	private RouteServiceImpl routeServiceImpl;
	
	
	/**
	 * "指令导航
	 * @param route
	 * @param card
	 * @return
	 */
	//操作的类型，1、添加 2、修改 3、删除 4、查询  5、登录
	@SystemControllerLog(type = "终端指令导航", actionType = "1")
	@ApiOperation(value = "终端指令导航", notes = "终端指令导航")
	@RequestMapping(value = "/orderNav", method = RequestMethod.POST)
	@ResponseBody
	public RestResponse getInfo1(HttpServletRequest request,String route,String card) {
		
		//HttpServletRequest request
		RestResponse result = new RestResponse();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH-mm-ss");
		
		try {
			HttpSession session = request.getSession();
	        User user = (User) session.getAttribute("loginInfo");
	        String userName = user.getName();
	        String userIP = user.getCurrentIp();
			
			Zhj centerZhj = new Zhj();
            centerZhj = zhjServiceImpl.getCurrentZhj();
            
            if (centerZhj ==null) {
            	result.setMessage("找不到当前指挥机！");
				result.setSuccess(false);
				result.setDescription(sdf.format(System.currentTimeMillis())+":找不到当前指挥机！");
				return result;
				
			}else {
				Route rr = routeServiceImpl.selectByName(route);
				if (rr ==null) {
					//路线为空
					result.setMessage("所选路线不存在");
					result.setSuccess(false);
					result.setDescription(sdf.format(System.currentTimeMillis())+":所选路线不存在");
					return result;
				}
				if (rr.getContent() ==null || rr.getContent().equals("")) {
					//路线为空
					result.setMessage("请先给路线添加途径点信息");
					result.setSuccess(false);
					result.setDescription(sdf.format(System.currentTimeMillis())+":请先给路线添加途径点信息");
					return result;
				}	
				String terminalCard[] = card.split(",");
				for(String card1: terminalCard) {
					String taskId = taskServiceImpl.sendBDNACTask(userName, userIP,
							centerZhj.getCardNum(),card1,rr);
					if (null == taskId) {
						result.setMessage("指令导航任务下发失败，请重试！");
						result.setSuccess(false);
						result.setDescription(sdf.format(System.currentTimeMillis())+":指令导航任务下发失败，请重试！");
					} else {
						result.setMessage("指令导航任务下发成功！");
						result.setSuccess(true);
						result.setDescription(sdf.format(System.currentTimeMillis())+":指令导航任务下发成功！");
					}
				}								
			}												
		} catch (Exception e) {
			result.setMessage("下发指令导航任务失败，请重试！");
			result.setSuccess(false);
			result.setDescription(sdf.format(System.currentTimeMillis())+":下发指令导航任务失败，请重试！");
			e.printStackTrace();			
		}		
		return result;	
	}
	
	
	/**
	 * 终端位置查询
	 * @param card
	 * @return
	 */
	//操作的类型，1、添加 2、修改 3、删除 4、查询  5、登录
	@SystemControllerLog(type = "终端位置查询", actionType = "4")
	@ApiOperation(value = "终端位置查询", notes = "终端位置查询")
	@RequestMapping(value = "/getLocation", method = RequestMethod.GET)
	@ResponseBody
	public RestResponse getInfo2(String card) {
		
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH-mm-ss");
		//HttpServletRequest request
		RestResponse result = new RestResponse();
		TerminalTaskInfo taskInfo = new TerminalTaskInfo();	
		
		List<Terminal> terList = new ArrayList<Terminal>();
		
		String longitude = "";
		String latitude = "";
		String locateTime = "";
		
		try {
			
			if (card == null || card.equals("")) {
				//
				result.setMessage("查询位置的卡号为空");
				result.setSuccess(false);
				result.setDescription(sdf.format(System.currentTimeMillis())+":查询位置的卡号为空");
				
			}else {
				
				terList = terminalServiceImpl.selectByCardNum(card);
				
				if (terList.size() > 0) {
					if (terList.size() >1) {
						result.setMessage("该卡号对应多个终端，请检查！");
						result.setSuccess(false);
						result.setDescription(sdf.format(System.currentTimeMillis())+":该卡号对应多个终端，请检查！");
						
					}else {
						Terminal terminal = terList.get(0);
						
						if (terminal !=null) {
							
							Position terPosition = positionServiceImpl.selectByPrimaryKey(terminal.getPositionId());
							
								if (terPosition != null) {

									if (terPosition.getLongitude() == null || terPosition.getLongitude().equals("")) {
										longitude = "0.0";
									} else {
										longitude = String.valueOf(terPosition.getLongitude());
									}

									if (terPosition.getLatitude() == null || terPosition.getLatitude().equals("")) {
										latitude = "0.0";
									} else {
										latitude = String.valueOf(terPosition.getLatitude());
									}

									if (terPosition.getLocateTime() == null || terPosition.getLocateTime().equals("")) {
										locateTime = "";
									} else {
										locateTime = terPosition.getLocateTime().toString();
									}

									taskInfo.setCard(card);
									taskInfo.setLongitude(longitude);
									taskInfo.setLatitude(latitude);
									taskInfo.setLocateTime(locateTime);

									result.setData(taskInfo);
									result.setMessage("查询终端位置信息成功");
									result.setSuccess(true);
									result.setDescription(sdf.format(System.currentTimeMillis()) + ":查询终端位置信息成功");

								} else {
									result.setStatus("2");
									result.setData(taskInfo);
									result.setMessage("该卡号对应的位置信息为空，请检查！");
									result.setSuccess(false);
									result.setDescription(
											sdf.format(System.currentTimeMillis()) + ":该卡号对应的位置信息为空，请检查！");
								}
							
							
							
							
						} else {
							result.setMessage("该卡号对应的终端不存在，请检查！");
							result.setSuccess(false);
							result.setDescription(sdf.format(System.currentTimeMillis())+":该卡号对应的终端不存在，请检查！");
						}
					}
				}else {
					result.setMessage("该卡号对应的终端不存在，请检查！");
					result.setSuccess(false);
					result.setDescription(sdf.format(System.currentTimeMillis())+":该卡号对应的终端不存在，请检查！");
				}
				
				
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			result.setMessage("出现异常，请重试！");
			result.setSuccess(false);
			result.setDescription(sdf.format(System.currentTimeMillis())+":出现异常，请重试！");
			
		}
		
		return result;
	
	}
	
	
	
	/**
	 * 	历史轨迹
	 * @param card
	 * @param startTime
	 * @param endTime
	 * @return
	 */
	//操作的类型，1、添加 2、修改 3、删除 4、查询  5、登录
	@SystemControllerLog(type = "终端历史轨迹", actionType = "5")
	@ApiOperation(value = "终端历史轨迹", notes = "终端历史轨迹")
	@RequestMapping(value = "/getHistoryLocation", method = RequestMethod.POST)
	@ResponseBody
	public RestResponse getInfo3(String card,String startTime,String endTime) {
		//HttpServletRequest request
		RestResponse result = new RestResponse();
		
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        
        String longitude = "";
		String latitude = "";
		String locateTime = "";
		
		List<TerminalTaskInfo> list = new ArrayList<>();
        
		try {
			
			//1.根据卡号查终端
			if (card == null || card.equals("")) {
				result.setMessage("查询的卡号为空");
				result.setSuccess(false);
				result.setDescription(sdf.format(System.currentTimeMillis())+":查询的卡号为空");
				return result;
				
			}else {
				//2.根据终端id和时间段查位置信息,正序
				List<Terminal> terList = terminalServiceImpl.selectBycardNum(card);
				
				if (terList.size() > 0) {
					if (terList.size() > 1) {
						result.setMessage("该卡号对应多个终端，请检查！");
						result.setSuccess(false);
						result.setDescription(sdf.format(System.currentTimeMillis())+":该卡号对应多个终端，请检查！");
						
					} else {
						Terminal terminal = terList.get(0);
						
						if (terminal != null) {

							List<Position> positionList = positionServiceImpl.selectByIdAndTime(terminal.getId(),startTime,endTime);
							
							if (positionList.size() > 0) {
								for (Position position : positionList) {

									TerminalTaskInfo taskInfo = new TerminalTaskInfo();

									if (position.getLongitude() == null || position.getLongitude().equals("")) {
										longitude = "0.0";
									} else {
										longitude = String.valueOf(position.getLongitude());
									}

									if (position.getLatitude() == null || position.getLatitude().equals("")) {
										latitude = "0.0";
									} else {
										latitude = String.valueOf(position.getLatitude());
									}

									if (position.getLocateTime() == null || position.getLocateTime().equals("")) {
										locateTime = "定位时间不详";
									} else {
										locateTime = position.getLocateTime().toString();
									}

									taskInfo.setCard(card);
									taskInfo.setLongitude(longitude);
									taskInfo.setLatitude(latitude);
									taskInfo.setLocateTime(locateTime);

									list.add(taskInfo);

								}
								//封装结果集
								result.setMessage("查询该卡历史轨迹信息成功！");
								result.setSuccess(true);
								result.setData(list);
								result.setDescription(sdf.format(System.currentTimeMillis())+":查询该卡历史轨迹信息成功！");
								
							} else {
								result.setMessage("该卡历史轨迹信息为空！");
								result.setSuccess(true);
								result.setData("");
								result.setDescription(sdf.format(System.currentTimeMillis())+":该卡历史轨迹信息为空！");
								
							}
							
							
							

						} else {
							result.setMessage("该卡号对应的终端不存在，请检查！");
							result.setSuccess(false);
							result.setData("");
							result.setDescription(sdf.format(System.currentTimeMillis())+":该卡号对应的终端不存在，请检查！");
						}

					}
					
					
				}else {
					result.setMessage("该卡号对应的终端不存在，请检查！");
					result.setSuccess(false);
					result.setData("");
					result.setDescription(sdf.format(System.currentTimeMillis())+":该卡号对应的终端不存在，请检查！");
				}
				
			}
			
			
		} catch (Exception e) {
			result.setMessage("");
			result.setSuccess(false);
			result.setData("");
			result.setDescription(sdf.format(System.currentTimeMillis())+":出现异常，请检查");
			e.printStackTrace();
			
		}
		
		return result;
	
	}
	
	
	
	
	
	

}

